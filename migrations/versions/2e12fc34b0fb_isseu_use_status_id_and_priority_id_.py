"""isseu: use status_id and priority_id, remove old columns

Revision ID: 2e12fc34b0fb
Revises: 45c198d02dda
Create Date: 2025-07-31 11:58:11.457339

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2e12fc34b0fb'
down_revision = '45c198d02dda'
branch_labels = None
depends_on = None


def upgrade():
    # 1. Add new columns (nullable for now)
    with op.batch_alter_table('issues', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('priority_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('fk_issues_status_id', 'statuses', ['status_id'], ['id'])
        batch_op.create_foreign_key('fk_issues_priority_id', 'priorities', ['priority_id'], ['id'])

    # 2. Ensure all status/priority values exist in the new tables
    # Insert missing statuses
    conn = op.get_bind()
    existing_statuses = {row['name'] for row in conn.execute(sa.text("SELECT name FROM statuses")).mappings()}
    for row in conn.execute(sa.text("SELECT DISTINCT status FROM issues")).mappings():
        if row['status'] and row['status'] not in existing_statuses:
            conn.execute(sa.text("INSERT INTO statuses (name) VALUES (:name)"), {"name": row['status']})
            existing_statuses.add(row['status'])

    # Insert missing priorities
    existing_priorities = {row['name'] for row in conn.execute(sa.text("SELECT name FROM priorities")).mappings()}
    for row in conn.execute(sa.text("SELECT DISTINCT priority FROM issues")).mappings():
        if row['priority'] and row['priority'] not in existing_priorities:
            conn.execute(sa.text("INSERT INTO priorities (name) VALUES (:name)"), {"name": row['priority']})
            existing_priorities.add(row['priority'])

    # Map status names to IDs
    status_map = {row['name']: row['id'] for row in conn.execute(sa.text("SELECT id, name FROM statuses")).mappings()}
    priority_map = {row['name']: row['id'] for row in conn.execute(sa.text("SELECT id, name FROM priorities")).mappings()}

    # Update issues with correct status_id and priority_id
    for row in conn.execute(sa.text("SELECT id, status, priority FROM issues")).mappings():
        status_id = status_map.get(row['status'])
        priority_id = priority_map.get(row['priority']) if row['priority'] else None
        conn.execute(
            sa.text("UPDATE issues SET status_id = :status_id, priority_id = :priority_id WHERE id = :id"),
            {"status_id": status_id, "priority_id": priority_id, "id": row['id']}
        )

    # 3. Make status_id non-nullable
    with op.batch_alter_table('issues', schema=None) as batch_op:
        batch_op.alter_column('status_id', existing_type=sa.Integer(), nullable=False)

    # 4. Drop old columns
    with op.batch_alter_table('issues', schema=None) as batch_op:
        batch_op.drop_column('status')
        batch_op.drop_column('priority')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('issues', schema=None) as batch_op:
        batch_op.add_column(sa.Column('priority', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('priority_id')
        batch_op.drop_column('status_id')

    # ### end Alembic commands ###
